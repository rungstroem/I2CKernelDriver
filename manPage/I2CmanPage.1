." The manual page for the deveopled kernel module
." This is the header that contains name, section number, (left and center footer, and center header) where text will be displayed on every page
." section number is 4 because that is the header for devices, and this is a device driver

.TH I2CKernelModule 4 "LEO 2 2021" "version 0.01 alpha"

." Sections are created with .SH for section header

.SH NAME
I2CKernelModule
Insert very short description of what the program does here

.SH SYNOPSIS
This describes the syntex used to run the program from the command line

.SH DESCRIPTION
This is where the programs functionality is described

.SH EXAMPLE

.SH OPTIONS
Supported commands used extracting and writing value to the IMU

.RS
.B getID 
- returns the IMUs' id 

.B TEMPH 
- returns the high byte of the temperature sensors' measurement

.B TEMPL 
- returns the low byte of the temperature sensors' measurement

.B ACCXH 
- 

.B ACCXL 
- 

.B ACCYH 
-

.B ACCYL 
- 

.B ACCZH 
- 

.B ACCZL 
- 

.B GYRXH 
- 

.B GYRXL 
- 

.B GYRYH 
- 

.B GYRYL 
- 

.B GYRZH 
- 

.B GYRZL 
- 
.RE

This is where the options, that the program takes, functionallity is described.

.SH BUGS
Known bugs. 
Unloading the module from the kernel using rmmod does not seem to work as the module cannot be loaded again using insmod afterwards.
A reboot is needed.

.SH AUTHOR
This program is solely written and maintained by the author:
.RS
Kenneth Rungstroem Larsen.
.RE

Contact:
.RS
rungstroem@gmail.com 
.RE
for more information, bug reports or anything related to the program.

.SH CONFIG
To use the driver the "dtparam=i2c_arm=on" or "dtparam=i2c1=on" should be set in the [/boot/config.txt] file.
	Usually if a device, specified as a device tree file, uses an interface it should not be needed to set it with dtparam, but in the case of the raspberry pi it may still be needed. 
The device tree overlay should be initialized with the "dtoverlay={name}" in the [/boot/config.txt] file.
	The device tree overlay is the compiled ".dtbo" file.
.SH AUTO-LOAD
Initializing the device driver can be done in many different ways.

Using the device-tree overlay I2CDriver.dtso the device driver can be autoloaded upon boot of the kernel. 
To do this the overlay is copied to the /boot/overlays folder  

The automatic loading mechanism "modprobe" depends on entry for the "compatible" string in the "modules.ofmap" file usually located in "/lib/modules/{kernel version}/kernel/modules.ofmap". To generate this entry the easiest solution is to copy the kernel module binary to "/lib/modules/{kernel version}/drivers/" and then executing [depmod -a].
The module can be now be loaded by issuing command:
	modprobe {module name} 

Using device tree.
.br 
Device trees are a uniform way of loading the correct device driver when a device appears at the I2C bus, or any bus, on kernel boot. The purpose is to allow multiple devices of the same type to utilize the same driver without specifying all of these devices in the driver source code. 
This is especially usefull when different manufactures produce essecentially the same device, but the devices' address may for example be changed. Instead of updating the device driver with all different device addresses, the device tree registers the type of device connected at boot, 
and assigns/loads the appropriate driver. 

Using explicit declaration.
.br 
Explicit declaration has all of the supported devices declared in the "struct i2c_board_info" structure using "I2C_BOARD_INFO". This structure explicitely states all supported devices name and address as well as other usefull information. The driver uses this structure to bind the driver 
to a device upon load, as long as the device is present. 

The difference between using explicit and device tree declaration is the need for stating all devices in the i2c_board_info within the source code for the driver as compared to stating the devices in the device tree. Using the device tree approach aliviates the need for recompilation of
the drivers' source code, when a new device has to be added. This makes it easier to distribute the driver as a binary through a package manager.

.SH "SEE ALSO"
.RS
https://www.kernel.org/doc/html/latest/i2c/summary.html

https://elinux.org/Device_Tree_Usage
.RE

." .br - line break - be carefull!
." use .PP for paragraf 
." .TP for tag paragraf
." .BI - bold and italic
." .B - bold
." .I - italic
." .RS - relative indent start - follow the text with .RE for relave indent end
." .IP - alternative to .TP - can be used to if we want to have -e in bold

." More information on man page writing on http://www.linuxhowtos.org/System/creatingman.htm
." and http://anaturb.net/create_man_p.htm

." to "compile" the man page use groff -man -Tascii ./I2CmanPage.1 | less 
